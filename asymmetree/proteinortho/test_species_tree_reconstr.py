# -*- coding: utf-8 -*-

import simulator.TreeSimulator as ts
import simulator.TreeImbalancer as tm
from simulator.Tree import Tree
from best_match_infer import TrueBMG

from SpeciesTreeFromParalogs import TreeReconstructor

# SPECIES TREE:
#S = ts.build_species_tree(10)

#S = Tree.parse_newick("(((154:0.6292426598223977,(156:0.12890712702460827,157:0.12890712702460827)155:0.5003355327977894)2:0.04787646176034377,(4:0.6428375109406994,(((158:0.3622887931148485,(160:0.17867979834450096,161:0.17867979834450096)159:0.18360899477034756)26:0.08404541570323955,(28:0.34442316642577875,((((90:0.039901240787416914,(92:0.015338344666113397,93:0.015338344666113397)91:0.024562896121303517)74:0.15771404119519228,((78:0.09469589407195839,((82:0.053468979448724197,(84:0.051750744376859045,(106:0.0239834927843888,(108:0.0038192587743543643,109:0.0038192587743543643)107:0.020164234010034435)85:0.027767251592470246)83:0.0017182350718651517)80:0.03637211366462875,(126:0.08788125880199149,(((198:0.00030905584225369005,199:0.00030905584225369005)130:0.00011545383594473446,131:0.0004245096781984245)128:0.05120881819801518,(132:0.04620440449718945,133:0.04620440449718945)129:0.005428923379024155)127:0.03624793092577789)81:0.001959834311361452)79:0.004854800958605442)76:0.017847609496320985,(94:0.01594416503924681,(96:0.009843153842549739,97:0.009843153842549739)95:0.006101011196697073)77:0.09659933852903256)75:0.08507177841432982)62:0.03820792961464184,(64:0.03020846251828707,65:0.03020846251828707)63:0.20561474907896396)38:0.09728116983523019,(40:0.25747076368668004,(86:0.13933556721635132,((98:0.056446566288349556,((102:0.01725310153923269,(104:0.005195200491516385,105:0.005195200491516385)103:0.012057901047716304)100:0.023843749486560057,(174:0.0372881193728269,((180:0.011208923346085347,181:0.011208923346085347)176:0.01831048358327765,(178:0.0014656463241910882,179:0.0014656463241910882)177:0.02805376060517191)175:0.007768712443463904)101:0.0038087316529658416)99:0.01534971526255681)88:0.03732358617204044,89:0.09377015246039)87:0.04556541475596133)41:0.11813519647032873)39:0.07563361774580117)29:0.0113187849932975)27:0.1019110423923093)6:0.01071577308422744,((10:0.15887822984068928,((16:0.046139924437900645,(142:0.026198647115505336,((148:0.003271689810905646,149:0.003271689810905646)144:0.022815669727852574,(146:0.006163799011155279,147:0.006163799011155279)145:0.01992356052760294)143:0.00011128757674711696)17:0.01994127732239531)12:0.026540106500116577,(14:0.06322052289803207,(18:0.029831963032790718,(20:0.011801680463753069,((34:0.0037518894358811406,(36:0.0005206844243012404,37:0.0005206844243012404)35:0.0032312050115799002)30:0.006226531251531013,(((50:0.00626501060459344,((56:0.0018968752238823691,((182:0.0013231278866059084,((188:4.0854819648235676e-05,189:4.0854819648235676e-05)184:0.000785539531788784,(186:0.0004033251716086432,187:0.0004033251716086432)185:0.0004230691798283765)183:0.0004967335351688887)134:0.00028113729279852614,((138:0.0009191663900579401,139:0.0009191663900579401)136:0.0003675499867258393,(140:0.00026705609892787793,(162:0.00019235230200183068,(164:9.468819866369294e-05,165:9.468819866369294e-05)163:9.766410333813773e-05)141:7.470379692604725e-05)137:0.0010196602778559014)135:0.00031754880262065534)57:0.00029261004447793463)52:0.0014185648739370013,((166:0.001502641683621193,((172:0.00040993650862187006,173:0.00040993650862187006)168:0.000566743989833271,(170:0.0006785285039443035,171:0.0006785285039443035)169:0.00029815199451083764)167:0.000525961185166052)54:0.0007881902331248959,((150:0.0001442793882213628,(152:9.990060219245111e-05,153:9.990060219245111e-05)151:4.43787860289117e-05)58:0.0020133708108160606,(60:0.0007961281124591239,61:0.0007961281124591239)59:0.0013615220865782994)55:0.00013318171770866538)53:0.0010246081810732814)51:0.0029495705067740696)42:0.0006391850760946253,(((110:0.002751299376470777,(((120:0.0008474522225799628,(122:0.00015768364837309592,123:0.00015768364837309592)121:0.0006897685742068668)114:0.0008688844208792484,(116:0.0014934460786223745,(118:0.00024274415153218527,119:0.00024274415153218527)117:0.0012507019270901892)115:0.0002228905648368368)112:0.00046053838483377474,(124:0.0014295497765114801,125:0.0014295497765114801)113:0.000747325251781506)111:0.0005744243481777907)48:0.0003411887641065463,((190:0.0012138899952391022,((196:0.0003387323673119156,197:0.0003387323673119156)192:0.0004889359729961131,(194:0.00022967005361498535,195:0.00022967005361498535)193:0.0005979982866930433)191:0.00038622165493107347)66:0.0007114280887212293,((70:0.0005393298358639893,71:0.0005393298358639893)68:0.00018263556057476578,(72:0.0006769614867396733,73:0.0006769614867396733)69:4.500390969908169e-05)67:0.0012033526875215763)49:0.0011671700566169918)44:0.0012091561224869417,(46:0.0038402380749994434,47:0.0038402380749994434)45:0.0004614061880648218)43:0.0026025514176238004)32:0.0006258905004142262,33:0.007530086181102291)31:0.002448334506309862)21:0.0018232597763409156)19:0.01803028256903765)15:0.03338855986524135)13:0.009459508039985166)11:0.08619819890267205)8:0.13448721041459782,(22:0.13837916775206308,(24:0.05116410283062724,25:0.05116410283062724)23:0.08721506492143584)9:0.15498627250322403)7:0.16368454164702842)5:0.1857875290383839)3:0.034281610642042)1:0.32288087841725854)0:0.0")
S = Tree.parse_newick("(((((16:0.38786287055727103,(18:0.2071277923445058,19:0.2071277923445058)17:0.18073507821276524)12:0.10075553853805931,(14:0.13224182895383052,15:0.13224182895383052)13:0.3563765801414998)4:0.07517286794939665,(6:0.5373882998574596,(8:0.4434182448023457,(10:0.04929450217312242,11:0.04929450217312242)9:0.3941237426292233)7:0.0939700550551139)5:0.02640297718726732)2:0.2512472266526016,3:0.8150385036973286)1:0.18496149630267142)0:0.0;")
S.reconstruct_IDs()
S.reconstruct_timestamps()

print(S.to_newick())

tr = TreeReconstructor()

for i in range(1000):
    
    TGT = ts.build_gene_tree(S, (1,1,0))
    TGT = tm.imbalance_tree(TGT, S, baseline_rate=1,
                            lognormal_v=0.2,
                            gamma_param=(0.5, 1.0, 2.2),
                            weights=(1, 1, 1),
                            copy_tree=False)
    OGT = ts.observable_tree(TGT)
    
#    ortho_graph = TrueBMG.true_orthology_graph(OGT)
#    tr.add_ortho_graph(ortho_graph)
    
    _, RBMG = TrueBMG.best_match_graphs(OGT)
    tr.add_ortho_graph(RBMG)
    
    
S_estimate = tr.build_species_tree(mode="mincut")

print(S_estimate.to_newick())

S_estimate2 = tr.build_species_tree(mode="BPMF")

print(S_estimate2.to_newick())